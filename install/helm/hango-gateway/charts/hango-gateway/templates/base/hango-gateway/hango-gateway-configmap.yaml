---
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-{{ .Values.istio_rev }}
  namespace: {{ .Values.namespace }}
  labels:
    app: istio
    istio.io/rev: {{ .Values.istio_rev }}
data:
  mesh: |-
    # Set the following variable to true to disable policy checks by the Mixer.
    # Note that metrics will still be reported to the Mixer.
    disablePolicyChecks: true
    # reportBatchMaxEntries is the number of requests that are batched before telemetry data is sent to the mixer server
    reportBatchMaxEntries: 100
    # reportBatchMaxTime is the max waiting time before the telemetry data of a request is sent to the mixer server
    reportBatchMaxTime: 1s
    # Set enableTracing to false to disable request tracing.
    enableTracing: true
    configSources:
      - address: xds://slime-hango.{{ .Values.namespace }}.svc:16010?types=serviceentry
      - address: k8s://

    # Set accessLogFile to empty string to disable access log.
    accessLogFile: "/tmp/gateway-proxy-envoy-access.log"

    # If accessLogEncoding is TEXT, value will be used directly as the log format
    # If AccessLogEncoding is JSON, value will be parsed as map[string]string
    # example: '{"start_time": "%START_TIME%", "req_method": "%REQ(:METHOD)%"}'
    # Leave empty to use default log format
    accessLogFormat: "{\"method\":\"%REQ(:METHOD)%\",\"uri\":\"%REQ(X-ENVOY-ORIGINAL-PATH?:PATH)%\",\"protocol\":\"%PROTOCOL%\",\"duration\":\"%DURATION%\",\"respCode\":\"%RESPONSE_CODE%\",\"userIp\":\"%DOWNSTREAM_REMOTE_ADDRESS_WITHOUT_PORT%\",\"xffIp\":\"%REQ(X-FORWARDED-FOR)%\",\"requestId\":\"%REQ(X-REQUEST-ID)%\",\"time\":\"%START_TIME(%s%3f)%\",\"upstreamHost\":\"%UPSTREAM_HOST%\",\"originHost\":\"%FILTER_STATE(x-envoy-origin-host:PLAIN)%\",\"originMethod\":\"%FILTER_STATE(x-envoy-origin-method:PLAIN)%\",\"originPath\":\"%FILTER_STATE(x-envoy-origin-path:PLAIN)%\",\"originStatus\":\"%FILTER_STATE(x-envoy-origin-status:PLAIN)%\",\"upstreamServiceTime\":\"%RESP(X-ENVOY-UPSTREAM-SERVICE-TIME)%\",\"cacheStatus\":\"%RESP(X-Cache-Status)%\",\"fuseStatus\":\"%RESP(X-Envoy-Circuitbreaking)%\",\"downgradeStatus\":\"%RESP(X-Downgrade-Status)%\",\"secureStatus\":\"%RESP(X-Secure-Status)%\",\"userAgent\":\"%REQ(USER-AGENT)%\",\"remoteUser\":\"%REQ(REMOTE-USER)%\",\"bodyBytesSent\":\"%BYTES_SENT%\",\"httpReferer\":\"%REQ(HTTP-REFERER)%\",\"requestAuthority\":\"%REQ(:AUTHORITY)%\",\"clusterName\":\"%FILTER_STATE(qz_cluster_name:PLAIN)%\",\"serviceName\":\"%FILTER_STATE(qz_svc_id:PLAIN)%\",\"apiId\":\"%FILTER_STATE(qz_api_id:PLAIN)%\",\"apiName\":\"%FILTER_STATE(qz_api_name:PLAIN)%\",\"responseFlags\":\"%RESPONSE_FLAGS%\",\"projectId\":\"%FILTER_STATE(qz_project_id:PLAIN)%\"}\n"
    accessLogEncoding: 'TEXT'

    enableEnvoyAccessLogService: false

    # Default connect timeout for dynamic clusters generated by Pilot and returned via XDS
    connectTimeout: 10s

    # Automatic protocol detection uses a set of heuristics to
    # determine whether the connection is using TLS or not (on the
    # server side), as well as the application protocol being used
    # (e.g., http vs tcp). These heuristics rely on the client sending
    # the first bits of data. For server first protocols like MySQL,
    # MongoDB, etc., Envoy will timeout on the protocol detection after
    # the specified period, defaulting to non mTLS plain TCP
    # traffic. Set this field to tweak the period that Envoy will wait
    # for the client to send the first bits of data. (MUST BE >=1ms)
    protocolDetectionTimeout: 100ms

    outboundClusterStatName: "%DESTINATION_RULE%"

    localityLbSetting:
      enabled: false

    ingressControllerMode: 1

    # DNS refresh rate for Envoy clusters of type STRICT_DNS
    dnsRefreshRate: 300s

    # The trust domain corresponds to the trust root of a system.
    # Refer to https://github.com/spiffe/spiffe/blob/master/standards/SPIFFE-ID.md#21-trust-domain
    trustDomain: "cluster.local"

    # The namespace to treat as the administrative root namespace for istio
    # configuration.
    rootNamespace: {{ .Values.namespace }}

    defaultConfig:
      ### ADVANCED SETTINGS #############
      # Where should envoy's configuration be stored in the istio-proxy container
      configPath: "/etc/istio/proxy"
      binaryPath: "/usr/local/bin/envoy"
      # The pseudo service name used for Envoy.
      serviceCluster: istio-proxy
      tracing:
        zipkin:
          # Address of the Zipkin collector
          address: zipkin.{{ .Values.namespace }}:9411
      # Address where istio Pilot service is running
      discoveryAddress: istiod.{{ .Values.namespace }}.svc.cluster.local:15010
      controlPlaneAuthPolicy: NONE
  # Configuration file for the mesh networks to be used by the Split Horizon EDS.
  meshNetworks: |-
    networks: {}

---
apiVersion: v1
data:
  envoy.yaml: |
    node:
      cluster: {{ .Values.gateway_cluster}}
      id: {{"{{"}} .nodeID {{"}}"}}
      metadata: {{"{{"}} .meta_json_str {{"}}"}}
    stats_config:
      stats_tags:
      - tag_name: envoy.cluster_name
        regex: "^cluster\\.((.+?((\\..+?\\.svc\\.cluster\\.local)|(\\.netease\\.static-\\d+))?)\\.)"
      - tag_name: envoy.tcp_prefix
        regex: "^tcp\\.((.*?)\\.)\\w+?$"
      - tag_name: envoy.response_code
        regex: "_rq(_(\\d{3}))$"
      - tag_name: envoy.response_code_class
        regex:  "_rq_(\\d)xx$"
      - tag_name: envoy.virtual_cluster
        regex: "^vhost(?=\\.).*?\\.vcluster\\.((.*?)\\.)\\w+?$"
      - tag_name: envoy.virtual_host
        regex: "^vhost\\.((.*?)\\.)"
      - tag_name: envoy.http_conn_manager_listener_prefix
        regex: "^listener(?=\\.).*?\\.http\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
      - tag_name: envoy.http_conn_manager_prefix
        regex: "^http\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
      - tag_name: envoy.listener_address
        regex: "^listener\\.(((?:[_.[:digit:]]*|[_\\[\\]aAbBcCdDeEfF[:digit:]]*))\\.)"
      - tag_name: envoy.mongo_prefix
        regex: "^mongo\\.(.+?)\\.(collection|cmd|cx_|op_|delays_|decoding_)(.*?)$"
      - tag_name: envoy.cache
        regex: "(cache\\.(.+?)\\.)"
      - tag_name: envoy.component
        regex: "(component\\.(.+?)\\.)"
      - tag_name: envoy.tag
        regex: "(tag\\.(.+?);\\.)"
      - tag_name: envoy.wasm_filter
        regex: "(wasm_filter\\.(.+?)\\.)"
      - tag_name: envoy.dubbo_interface
        regex: "dubbo\\..*?(\\.(.*?))\\."
      - tag_name: envoy.dubbo_method
        regex: "dubbo\\..*?\\..*?(\\.(.*?))\\."
      use_all_default_tags: false
    static_resources:
      clusters:
      - name: admin-server
        type: STRICT_DNS
        connect_timeout: 5.000s
        load_assignment:
          cluster_name: admin-server
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 127.0.0.1
                    port_value: 20000
      - name: sds-grpc
        type: STATIC
        http2_protocol_options: {}
        connect_timeout: 1s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: sds-grpc
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  pipe:
                    path: ./etc/istio/proxy/SDS
      - name: xds_grpc
        type: STRICT_DNS
        respect_dns_ttl: true
        connect_timeout: 5.000s
        lb_policy: ROUND_ROBIN
        load_assignment:
          cluster_name: xds_grpc
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: {{ $.Values.gateway_xds_service_address }}
                    port_value: 15010
        circuit_breakers:
          thresholds:
          - priority: DEFAULT
            max_connections: 100000
            max_pending_requests: 100000
            max_requests: 100000
          - priority: HIGH
            max_connections: 100000
            max_pending_requests: 100000
            max_requests: 100000
        http2_protocol_options: {}
        upstream_connection_options:
          tcp_keepalive:
            keepalive_time: 300
        max_requests_per_connection: 1
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 19000
        filter_chains:
          filters:
          - name: envoy.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              codec_type: AUTO
              stat_prefix: admin
              route_config:
                virtual_hosts:
                - name: backend
                  domains:
                    - '*'
                  routes:
                    - match:
                        prefix: "/metrics"
                      route:
                        cluster: admin-server
                        prefix_rewrite: "/stats/prometheus"
                    - match:
                        prefix: /config_dump
                      route:
                        cluster: admin-server
                    - match:
                        prefix: /httpfilter
                      route:
                        cluster: admin-server
                    - match:
                        prefix: /ready
                      route:
                        cluster: admin-server
                    - match:
                        prefix: /clusters
                      route:
                        cluster: admin-server
                    - match:
                        prefix: /server_info
                      route:
                        cluster: admin-server
              http_filters:
              - name: envoy.health_check
                typed_config:
                  '@type': type.googleapis.com/envoy.extensions.filters.http.health_check.v3.HealthCheck
                  pass_through_mode: false
                  headers:
                  - name: :path
                    prefix_match: "/alive"
              - name: envoy.router
                typed_config:
                  '@type': type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
    dynamic_resources:
      ads_config:
        api_type: GRPC
        transport_api_version: v3
        grpc_services:
        - envoy_grpc: {cluster_name: xds_grpc}
      cds_config:
        ads: {}
        resource_api_version: v3
      lds_config:
        ads: {}
        resource_api_version: v3
    admin:
      access_log_path: /dev/null
      profile_path: /var/lib/istio/data/envoy.prof
      address:
        socket_address:
          address: 127.0.0.1
          port_value: 20000
kind: ConfigMap
metadata:
  labels:
    app: hango-proxy
  name: "hango-proxy-config"
  namespace: {{ .Values.namespace }}


---
apiVersion: v1
data:
  cfg: |
    {"bundle":{"modules":[{"name":"plugin","kind":"plugin"},{"name":"limiter","kind":"limiter"},{"name":"meshregistry","kind":"meshregistry"}]},"enable":true,"global":{"service":"","istioNamespace":"hango-system","slimeNamespace":"hango-system","istioRev":"","configRev":"mesh-reg","configSources":[{"address":"ss://"}],"log":{"klogLevel":5,"logLevel":"info"},"misc":{"pathRedirect":"/ready->/meshregistry/ready,/pc->/meshregistry/pc,/nc->/meshregistry/nc,/zk->/meshregistry/zk,/zks->/meshregistry/zks,/xdsCache->/meshregistry/xdsCache","xdsSourceEnableIncPush":"true"}},"name":"bundle"}
  cfg_limiter: |
    {"enable":true,"general":{"disableInsertLocalRateLimit":true,"disableAdaptive":true,"disableGlobalRateLimit":true,"disableInsertGlobalRateLimit":true},"kind":"limiter","mode":"BundleItem","name":"limiter"}
  cfg_plugin: |
    {"enable":true,"kind":"plugin","mode":"BundleItem","name":"plugin"}
  cfg_meshregistry: |
    {"name":"meshregistry","kind":"meshregistry","enable":true,"mode":"BundleItem","general":{"LEGACY":{"MeshConfigFile":"","RevCrds":"","Mcp":{},"K8SSource":{"Enabled":false},"EurekaSource":{"Enabled":{{ .Values.registry.eureka.enable }},"Address":[{{ .Values.registry.eureka.address }}],"RefreshPeriod":"{{ .Values.registry.eureka.refresh_period }}","GatewayModel":true},"NacosSource":{"Enabled":{{ .Values.registry.nacos.enable }},"Address":[{{ .Values.registry.nacos.address }}],"GatewayModel":true,"Group":"{{ .Values.registry.nacos.service_group }}"},"ZookeeperSource":{"Enabled":{{ .Values.registry.zk.enable }},"WaitTime":{{ .Values.registry.zk.refresh_period }},"GatewayModel":true,"Address":[{{ .Values.registry.zk.address }}]}}}}
kind: ConfigMap
metadata:
  name: slime-hango
  namespace: {{ .Values.namespace }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hango-api-plane-config
  namespace: {{ .Values.namespace }}
data:
  k8s.yaml: |-
    k8s:
      clusters:
        # 单集群可不配相关信息
        default:
          k8s-api-server: ""
          cert-data: ""
          key-data: ""

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hango-portal-config
  namespace: {{ .Values.namespace }}
data:
  gdashboard-jdbc.properties: |
    # use h2 database
    spring.datasource.platform=h2
    spring.datasource.url=jdbc:h2:mem:test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false;MODE=MYSQL;TRACE_LEVEL_FIle=4;TRACE_LEVEL_SYSTEM_OUT=3
    spring.datasource.driverClassName=org.h2.Driver
    spring.datasource.username=sa
    spring.datasource.password=root
    spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
    spring.jpa.hibernate.ddl-auto=create-drop
    spring.datasource.initialization-mode=always

    spring.datasource.schema=classpath:schema.sql
    spring.datasource.data=classpath:data.sql
    spring.h2.console.enabled=true
    spring.h2.console.path=/h2
    spring.h2.console.settings.web-allow-others=true

  data.sql: |
    MERGE INTO apigw_gportal_api_document_status (
    id,
    status
    )
    VALUES (
    1,
    '开发中'
    ), (
    2,
    '联调中'
    ), (
    3,
    '提测中'
    ), (
    4,
    '已上线'
    );
    {{ if .Values.registry.nacos.enable }}
    INSERT INTO apigw_gportal_registry_center (`registry_type`, `registry_addr`, `registry_alias`) VALUES ('Nacos', '-', 'nacos');
    {{- end }}
    {{ if .Values.registry.eureka.enable }}
    INSERT INTO apigw_gportal_registry_center (`registry_type`, `registry_addr`, `registry_alias`) VALUES ('Eureka', '-', 'eureka');
    {{- end }}